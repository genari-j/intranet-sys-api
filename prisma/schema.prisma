generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// GENERAL SYSTEMS
model Department {
  id         String    @id @unique @default(uuid())
  name       String
  active     Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  users              User[]
  incidents          Incident[]
  incidentCategories IncidentCategory[]

  @@map("departments")
}

model Addresses {
  id           String    @id @unique @default(uuid())
  street       String
  number       Int
  neighborhood String
  city         String
  state        String
  cep          String
  complement   String?
  active       Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  users User[]

  @@map("addresses")
}

model User {
  id            String     @id @unique @default(uuid())
  name          String
  email         String?    @unique
  registration  String     @unique
  password      String
  contact       String?
  department    Department @relation(fields: [department_id], references: [id])
  department_id String
  address       Addresses  @relation(fields: [address_id], references: [id])
  address_id    String
  manager       User?      @relation("UserToUser", fields: [manager_id], references: [id])
  manager_id    String?
  active        Boolean    @default(true)
  avatar        String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?

  points         HumanResourcesPoint[]
  signinLogs     SigninLogs[]
  incidents      Incident[]
  registers      Incident[]            @relation("RegisterByUser")
  subordinates   User[]                @relation("UserToUser")
  Notification   Notification[]
  UserPermission UserPermission[]
  IncidentLog    IncidentLog[]

  @@map("users")
}

model Permission {
  id             String           @id @unique @default(uuid())
  name           String           @unique
  description    String           @db.Text
  active         Boolean          @default(true)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  deleted_at     DateTime?
  UserPermission UserPermission[]

  @@map("permissions")
}

model UserPermission {
  id            String     @id @unique @default(uuid())
  user          User       @relation(fields: [user_id], references: [id])
  user_id       String
  permission    Permission @relation(fields: [permission_id], references: [id])
  permission_id String
  active        Boolean    @default(true)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?

  @@map("user_permissions")
}

model SigninLogs {
  id         String    @id @unique @default(uuid())
  user       User      @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  @@map("signin_logs")
}

model Notification {
  id          String    @id @unique @default(uuid())
  title       String
  description String    @db.Text
  user        User      @relation(fields: [user_id], references: [id])
  user_id     String
  read        Boolean   @default(false)
  active      Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  @@map("notifications")
}

// NEWS SYSTEM
model NewsFlag {
  id          String    @id @unique @default(uuid())
  name        String
  description String    @db.Text
  active      Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  flags News[]

  @@map("news_flag")
}

model News {
  id          String    @id @unique @default(uuid())
  title       String
  description String    @db.Text
  flag        NewsFlag  @relation(fields: [flag_id], references: [id])
  flag_id     String
  active      Boolean   @default(true)
  avatar      String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  @@map("news")
}

// HUMAN RESOURCES SYSTEM
model HumanResourcesPoint {
  id           String    @id @unique @default(uuid())
  user         User      @relation(fields: [user_id], references: [id])
  user_id      String
  entry        DateTime
  lunch_out    DateTime?
  lunch_return DateTime?
  departure    DateTime?
  active       Boolean   @default(true)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  @@map("human_resources_points")
}

// INCIDENTS SYSTEM
model IncidentPriority {
  id          String    @id @unique @default(uuid())
  name        String    @unique
  description String    @db.Text
  active      Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  priorities Incident[]

  @@map("incident_priorities")
}

model IncidentStatus {
  id          String    @id @unique @default(uuid())
  name        String    @unique
  description String    @db.Text
  active      Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  incidents Incident[]

  @@map("incident_status")
}

model IncidentCategory {
  id            String     @id @unique @default(uuid())
  name          String     @unique
  description   String     @db.Text
  department    Department @relation(fields: [department_id], references: [id])
  department_id String
  active        Boolean    @default(true)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?

  incidents Incident[]

  @@map("incident_categories")
}

model Incident {
  id            String           @id @unique @default(uuid())
  code          String           @unique
  title         String
  description   String           @db.Text
  register      User             @relation("RegisterByUser", fields: [register_by], references: [id])
  register_by   String
  department    Department       @relation(fields: [department_id], references: [id])
  department_id String
  priority      IncidentPriority @relation(fields: [priority_id], references: [id])
  priority_id   String
  status        IncidentStatus   @relation(fields: [status_id], references: [id])
  status_id     String
  category      IncidentCategory @relation(fields: [category_id], references: [id])
  category_id   String
  user          User?            @relation(fields: [assigned_id], references: [id])
  assigned_id   String?
  deadline      DateTime?
  active        Boolean          @default(true)
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt
  deleted_at    DateTime?

  incidentAvatars IncidentAvatar[]
  incidentLogs    IncidentLog[]

  @@map("incidents")
}

model IncidentAvatar {
  id          String    @id @unique @default(uuid())
  incident    Incident  @relation(fields: [incident_id], references: [id])
  incident_id String
  avatar      String?
  active      Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  @@map("incident_avatars")
}

model IncidentLog {
  id          String    @id @unique @default(uuid())
  incident    Incident  @relation(fields: [incident_id], references: [id])
  incident_id String
  field       String
  old_value   String?
  new_value   String?
  user        User      @relation(fields: [user_id], references: [id])
  user_id     String
  active      Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  @@map("incident_logs")
}
